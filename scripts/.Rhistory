grep("O",gen1)
#new variable
num2=23:240
num2=as.character(num2)
num2
grep("45",num2)
num2[23]
num2[123]
myvec3=c(1:3,rep(5,times=3),seq(from=9,to=13,by=2),24,29,164)
myvec3
myvec3=c(1:3,rep(5,times=3),seq(from=9,to=13,by=2),
24,29,164)
myvec3
muvec1=1:29
myvec1=1:29
myvec1
#change value
myvec1[18]=64
myvec1
#size of vector
length(myvec1)
? any
#search (condition)
any(myvec1==1)
myvec1
#search (condition)
any(myvec1==1)
all(myvec1==1)
myvec1
myvec2=c(1,1,1,1)
all(myvec2==1)
myvec2
which(myvec1==1)
which(myvec1>12)
myvec1[13]
length(which(myvec1>12))
which(myvec1>12)
myvec1[which(myvec1>12)]
#multi search
which(myvec1[which(myvec1>12)]/2==0)
#multi search
which(myvec1[which(myvec1>12)]>60)
#multi search
myvec1[which(myvec1>12)][
which(myvec1[which(myvec1>12)]>60)]
myvec1[
which(myvec1[which(myvec1>12)]>60)]
#remove
myvec1=myvec1[-c(2,4)]
myvec1
install.packages("stringr")
#import
library("stringr")
#import
library("stringr")
str1="AAAATCGA"
str_count(str1,"A")
#concatinate
str1+'A'
str1="AAAATCGAAAAATCGAAAAATCGAAAAATCGAAAAATCGA"
A_number=str_count(str1,"A")
T_number=str_count(str1,"T")
C_number=str_count(str1,"C")
G_number=str_count(str1,"G")
G_number
GC_content=(G_number+C_number)/
(A_number+T_numberC_number+G_number)
GC_content=((G_number+C_number)/
(A_number+T_number+C_number+G_number))*100
GC_content
total=A_number+T_number+C_number+G_number
GC_content=((G_number+C_number)/total)*100
GC_content
#defenition
#modify
#selection
#remove
#find
#size
#sort
myvec=c(3,4,6,2,10,23,8)
sort(myvec)
sort(myvec,decreasing = T)
myvec[1]=59
myvec[c(1,3,7)]=29
myvec
myvec[c(1,3,7)]=c(29,41)
myvec[c(1,3,7)]=c(29,41,44)
myvec
sum(myvec)
#defenition
matrix1=matrix(c(2,3,6,9),nrow = 2,ncol=2)
myvec
matrix1
View(matrix1)
fix(matrix1)
fix(matrix1)
matrix1
matrix2=matrix(c(2,3,6,9),nrow = 2,ncol=2,byrow = T)
matrix2
names(matrix2)
#names
names(matrix2)=c('A','B')
matrix2
#names
names(matrix2)=c('A','B','C','D')
matrix2
matrix1
#selection
#single selection
matrix1[1,2]
matrix1
matrix1[1]
matrix1[3]
matrix2['A']
matrix2
matrix2['B']
matrix1[1,]
matrix2[,2]
matrix1
diag(matrix1)
matrix1[c(1,1),c(2,2)]
matrix1[c(1,3)]
matrix1[c('A','B')]
matrix2[c('A','B')]
matrix1=matrix1[-1,]
matrix1
matrix2[c(2,4)]=64
matrix2
#size
dim(matrix1)
#size
length(matrix1)
dim(matrix2)
dim(matrix2)[1]
dim(matrix2)[2]
#sort
sort(matrix2)
#find
which(matrix2>5)
#find
matrix2[which(matrix2>5)]
matrix2=c(matrix1,matrxi2)
matrix2=c(matrix1,matrix2)
matrix2
#defenition
matrix1=matrix(c(2,3,6,9),nrow = 2,ncol=2)
matrix2=matrix(c(2,3,6,9),nrow = 2,ncol=2,byrow = T)
rbind(matrix1,matrix2)
matrix1
matrix2
rbind(matrix1,matrix2)
cbind(matrix1,matrxi2)
cbind(matrix1,matrix2)
matrxi3=matrix(c(2,3,4,5,6),nrow=2,ncol=3)
matrxi3=matrix(c(2,3,4,5,6,7),nrow=2,ncol=3)
rbind(matrix1,matrxi3)
cbind(matrix1,matrix3)
cbind(matrix1,matrxi3)
myvec3=c(1,2)
cbind(matrix3,myvec3)
cbind(matrxi3,myvec3)
matrix4=cbind(matrxi3,myvec3)
matrxi4
matrix4
matrix4[1,4]
rbind(matrxi3,myvec3)
matrix5=matrix(c(1,2,3,4,5,6),nrow=2,ncol=3)
fix(matrix5)
transpose_matrix=t(matrix5)
matrix5
transpose_matrix
diag(matrix5)
matrix6=diag(6)
matrix6
matrix7=6*matrix5
matrix7
dim(matrix5)
dim(matrix7)
#*
matrix5*matrix7
matrix5
matrix7
matrix5%*%matrix7
dim(matrix5)
dim(matrix7)
dim(matrix6)
dim(transpose_matrix)
matrix5%*%transpose_matrix
#matrix inversion
matrix_inv=solve(matrix5)
#matrix inversion
matrix_new=matrix(c(1,2,3,4),nrow=2,ncol=2)
matrix_inv=solve(matrix_new)
matrix_new%*%matrix_inv
myvec1=c(1,6,7,9,24)
myvec1[c(2,4)]
matrix_new
matrix_new[c(1,4)]
matrix_new[c(1,2,4)]
matrix_new[1,2]='ch'
matrix_new
? array
array1=array(1:24,c(3,4,2))
array1
array1=array(1:24,c(3,5,2))
array1
array1=array(1:24,c(3,5,2)
c
array1=array(1:24,c(3,5,2
0
array1=array(1:24,c(3,5,2)]
array1=array(1:24,c(3,5,2))
array1
?debug()
aray2=array(1:24,c(3,4,2,3))
array2
array2=array(1:24,c(3,4,2,3))
array2
array1
array1[1,1,1]
array1[1,3,1]
array1[1,,1]
array1[,1,1]
array1[,,1]
array1[1,c(2,3),1]
array1[1,,]
array2
array2[1,1,2,3]
array2[1,1,2,]
array2[1,1,,3]
array2[1,1,,]
list1=list(c(1:6),seq(from=1,to:45,by=3),
matrix(c(1,2,3,4),nrow=2,ncol=2),
'ch',array(1:24),c(2,3,4))
? seq()
list1=list(c(1:6),seq(from=1,to=45,by=3),
matrix(c(1,2,3,4),nrow=2,ncol=2),
'ch',array(1:24),c(2,3,4))
list1
list1=list(c(1:6),seq(from=1,to=45,by=3),
c
0
list1=list(c(1:6),seq(from=1,to=45,by=3),
matrix(c(1,2,3,4),nrow=2,ncol=2),
'ch',array((1:24),c(2,3,4)))
list1=list(c(1:6),seq(from=1,to=45,by=3),
matrix(c(1,2,3,4),nrow=2,ncol=2),
'ch',array((1:24),c(2,3,4)),10)
list1
list[[2]]
list1[[2]]
list1[[6]]
list1[[c(1,6)]]
list1[[c(1,6)]]
list1[[c(1,4)]]
list1[[c(2,4)]]
list1[c(1,2)]
list[-c(1,2)]
list[[-1]]
length(list1)
list1[-c(1,2)]
list1=list1[-c(1,2)]
list1
which(list1>2)
list2=list(list1,12)
list2=c(list1,12)
list2
gene1=c("T","A")
if (gene1[2]=="A") {
if (gene1[1]=="T"){
print("TA")
}
}
gene1=c("T","A","G")
if (gene1[2]=="A" || gene1[3]=="G") {
print("AG")
}
#example 2
gene2="ATCAAGC"
gene2
gene1
gene2[1]
#convert string to vector
gene2=as.vector(gene2)
gene2
gene2=vector("A","T","C","A","A","G","C")
gene2=c("A","T","C","A","A","G","C")
counter=0
if (gene2[1]=="A") {
counter=counter+1
}
if (gene2[2]=="A") {
counter=counter+1
}
if (gene2[3]=="A") {
counter=counter+1
}
if (gene2[4]=="A") {
counter=counter+1
}
if (gene2[5]=="A") {
counter=counter+1
}
if (gene2[6]=="A") {
counter=counter+1
}
if (gene2[7]=="A") {
counter=counter+1
}
#loop --> 1: for    2: while
for (indx in 1:7){
print(indx)
if (gene2[indx]=="A") {
counter=counter+1
}
}
#loop --> 1: for    2: while
counter=0
for (indx in 1:7){
print(indx)
if (gene2[indx]=="A") {
counter=counter+1
}
}
gene2=c("A","T","C","A","A","G","C","A")
#loop --> 1: for    2: while
counter=0
for (indx in 1:7){
print(indx)
if (gene2[indx]=="A") {
counter=counter+1
}
}
#loop --> 1: for    2: while
counter=0
for (indx in 1:length(gene2)){
print(indx)
if (gene2[indx]=="A") {
counter=counter+1
}
}
#read file
file1=read.csv("dat.csv",header = T)
fix(file1)
write.csv(file1,"dat_final.csv")
#read file
file1=read.csv("dat.csv",header = T)
#read file
file1=read.csv("dat/dat.csv",header = T)
write.csv(file1,"dat/dat_final.csv")
write.csv(file1,"dat/dat_final2.csv")
num_A=0
num_T=0
num_C=0
num_G=0
num_A=0
num_T=0
num_C=0
num_G=0
while (counter<length(gene2)) {
if (gene2[counter]=="A") {
num_A=num_A+1
}else if (gene2[counter]=="T") {
num_T=num_T+1
}else if (gene2[counter]=="C") {
num_C=num_C+1
}else{
num_G=num_G+1
}
counter=counter+1
}
GC=((num_C+num_G)/(num_A+num_T+num_C+num_G))*100
? function()
c
GCcontent <- function(gene){
counter=0
num_A=0
num_T=0
num_C=0
num_G=0
while (counter<length(gene2)) {
if (gene2[counter]=="A") {
num_A=num_A+1
}else if (gene2[counter]=="T") {
num_T=num_T+1
}else if (gene2[counter]=="C") {
num_C=num_C+1
}else{
num_G=num_G+1
}
counter=counter+1
}
GC=((num_C+num_G)/(num_A+num_T+num_C+num_G))*100
return GC
}
GCcontent <- function(gene){
counter=0
num_A=0
num_T=0
num_C=0
num_G=0
while (counter<length(gene2)) {
if (gene2[counter]=="A") {
num_A=num_A+1
}else if (gene2[counter]=="T") {
num_T=num_T+1
}else if (gene2[counter]=="C") {
num_C=num_C+1
}else{
num_G=num_G+1
}
counter=counter+1
}
GC=((num_C+num_G)/(num_A+num_T+num_C+num_G))*100
return GC
}
GCcontent <- function(gene){
counter=0
num_A=0
num_T=0
num_C=0
num_G=0
while (counter<length(gene2)) {
if (gene2[counter]=="A") {
num_A=num_A+1
}else if (gene2[counter]=="T") {
num_T=num_T+1
}else if (gene2[counter]=="C") {
num_C=num_C+1
}else{
num_G=num_G+1
}
counter=counter+1
}
GC=((num_C+num_G)/(num_A+num_T+num_C+num_G))*100
return(GC)
}
gene2=c("A","T","C","A","A","G","C","A")
GCcontent(gene2)
GCcontent <- function(gene){
counter=0
num_A=0
num_T=0
num_C=0
num_G=0
while (counter<length(gene)) {
if (gene[counter]=="A") {
num_A=num_A+1
}else if (gene[counter]=="T") {
num_T=num_T+1
}else if (gene[counter]=="C") {
num_C=num_C+1
}else{
num_G=num_G+1
}
counter=counter+1
}
GC=((num_C+num_G)/(num_A+num_T+num_C+num_G))*100
return(GC)
}
gene2=c("A","T","C","A","A","G","C","A")
GCcontent(gene2)
GCcontent <- function(gene){
print(gene)
counter=0
num_A=0
num_T=0
num_C=0
num_G=0
while (counter<length(gene)) {
if (gene[counter]=="A") {
num_A=num_A+1
}else if (gene[counter]=="T") {
num_T=num_T+1
}else if (gene[counter]=="C") {
num_C=num_C+1
}else{
num_G=num_G+1
}
counter=counter+1
}
GC=((num_C+num_G)/(num_A+num_T+num_C+num_G))*100
return(GC)
}
gene2=c("A","T","C","A","A","G","C","A")
GCcontent(gene2)
GCcontent <- function(gene){
counter=1
num_A=0
num_T=0
num_C=0
num_G=0
while (counter<length(gene)) {
if (gene[counter]=="A") {
num_A=num_A+1
}else if (gene[counter]=="T") {
num_T=num_T+1
}else if (gene[counter]=="C") {
num_C=num_C+1
}else{
num_G=num_G+1
}
counter=counter+1
}
GC=((num_C+num_G)/(num_A+num_T+num_C+num_G))*100
return(GC)
}
gene2=c("A","T","C","A","A","G","C","A")
GCcontent(gene2)
dat=c(1,2,5,7,3,2,4,1)
factor(dat)
